<?php
namespace core;
use utils\SessionManager;

/**
 * please do not edit this file
 * you can add your routes to <b>routes.php</b> file below
 */
class Router{
    private static $protctedPages=[];

    private static $getPaths=[];
    private static $postPaths=[];
    private static $args=[];
    private static $currentRuquestLabel='';

    /**
     * @param $pathIndication a string expression like /users/{d}
     * @param $callback callback or [Object,'methodName']
     * @param string $label optional lablel for this endpoint
     * @return void
     */
    public static function get($pathIndication,$callback,string $label=''){
        self::$getPaths[$pathIndication]['callback']=$callback;
        self::$getPaths[$pathIndication]['label']=$label;
    }
    /**
     * @param $pathIndication a string expression like /users/{d}
     * @param $callback callback or [Object,'methodName']
     * @return void
     */
    public static function post($pathIndication,$callback,string $label=''){
        self::$postPaths[$pathIndication]['callback']=$callback;
        self::$postPaths[$pathIndication]['label']=$label;
    }

    /**
     * @param $uriIndication
     * @param $requestPath
     * @return bool
     */
    private static function match($uriIndication,$requestPath){
        $uriIndication=self::strRemoveEndAndStartSlashes($uriIndication);
        $requestPath=self::strRemoveEndAndStartSlashes($requestPath);
        preg_match_all("#\{([^/]+)\}#",$uriIndication,$uriIndicationNames);
        $uriRegex=preg_replace("#\{([^/]+)\}#",'([^/]+)',$uriIndication);
        $uriRegex='#^'.$uriRegex.'$#';
        if(preg_match($uriRegex,$requestPath,$matches)){
            self::$args=[];
            for($i =1;$i<count($matches);$i++){
                self::$args[]=$matches[$i];
            }
            return true;
        }
        return false;
    }

    /**
     * processes the current incoming request and routes it to the corresponding function or class method
     * @return void
     * @throws Exception
     */
    public static function processIncomingRequest(){
        $foundRout=false;
        $requestUri=self::getRequestCleanUri();
        $paths=$_SERVER['REQUEST_METHOD']==='GET'?self::$getPaths:($_SERVER['REQUEST_METHOD']==='POST'?self::$postPaths:null);
        if($paths===null){
            throw new Exception('method not supported');
        }
        foreach ($paths as $uriIndication => $uriConfig){
            if(self::match($uriIndication,$requestUri)){
                self::$currentRuquestLabel=$uriConfig['label'];
                $foundRout=true;
                if(!in_array(self::$currentRuquestLabel,self::$protctedPages) OR  SessionManager::getInstance()->isLoggedIn()){
                    call_user_func_array($uriConfig['callback'],self::$args);
                }else
                    redirect('/');
            }
        }
        if(!$foundRout){
            //should redirect to 404 page
            viewNoSidebar('404');
        }
    }

    /**
     * @param $uriIndecation
     * @return string
     */
    public static function createRegexFromUriIndecation($uriIndecation):string{
        $uriRegex=preg_replace("#\{([^/]+)\}#",'([^/]+)',$uriIndecation);
        $uriRegex='#^'.$uriRegex.'$#';
        return $uriRegex;

    }

    /**
     * @param $endpointLabel
     * @return bool
     */
    public static function isRequestFor($endpointLabel):bool{
        return self::$currentRuquestLabel===$endpointLabel;
    }

    /**
     * @param $str
     * @return string|string[]|null
     */
    private static function strRemoveEndAndStartSlashes($str){
        $str=preg_replace('#^/#','',$str);
        return preg_replace('#/$#','',$str);
    }
    private static function getRequestCleanUri(){
        return parse_url($_SERVER['REQUEST_URI'],PHP_URL_PATH);

    }
    public static function setAuthenticationRequired($endpointLabel){
        self::$protctedPages[]=$endpointLabel;
    }
}
